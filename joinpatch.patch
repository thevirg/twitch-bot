diff --git a/plugins/core_custom_responses.py b/plugins/core_custom_responses.py
index 2f1d6f0..681f84d 100644
--- a/plugins/core_custom_responses.py
+++ b/plugins/core_custom_responses.py
@@ -60,50 +60,50 @@ def erase_response_from_file(trigger: str, file=CUSTOM_RESPONSES_FILE) -> bool:
     return False
 
 
-@BOT.decorator(['!add'], access=1)
-def command_add_custom_responses(message: Message):
-    """Decorates a new function while saving them.
-
-    Args:
-        message (Message): !add <command> <response>
-    """
-    # TODO
-    # Save entire function as-is, so that some data can be persistent,
-    # such as counters or whatever.
-    commands = message.message.split()
-    m = message.message
-
-    if len(commands) < 3:
-        BOT.send_message('Syntax: !add <command> <text response>')
-        return
-
-    command = commands[1].lower()
-    response = m[len(commands[0])+len(commands[1])+2:]
-
-    # https://www.codementor.io/@arpitbhayani/overload-functions-in-python-13e32ahzqt
-    # When overloading the same name, a new function is created entirely. check id().
-    # Python will not loose its memory address since it's being referenced elsewhere.
-    @BOT.decorator([command])
-    def custom_function(_):
-        BOT.send_message(response)
-
-    result = save_response_file({'command': command, 'response': response})
-    BOT.send_message(f'"{command}" {result}! \U0001F4BE')
-
-
-@BOT.decorator(['!remove', '!erase', '!del'], access=1)
-def command_remove_custom_responses(message: Message):
-    commands = message.message.split()
-    if len(commands) < 2:
-        BOT.send_message('Syntax: !remove <!command>')
-        return
-    result = erase_response_from_file(commands[1])
-
-    for handler in BOT.handlers:
-        if commands[1] in handler['commands']:
-            BOT.handlers.remove(handler)
-
-    BOT.send_message(f'{commands[1]} {"deleted!" if result else "not found!"}')
-
-
-create_responses_from_file()
+# @BOT.decorator(['!add'], access=1)
+# def command_add_custom_responses(message: Message):
+#     """Decorates a new function while saving them.
+#
+#     Args:
+#         message (Message): !add <command> <response>
+#     """
+#     # TODO
+#     # Save entire function as-is, so that some data can be persistent,
+#     # such as counters or whatever.
+#     commands = message.message.split()
+#     m = message.message
+#
+#     if len(commands) < 3:
+#         BOT.send_message('Syntax: !add <command> <text response>')
+#         return
+#
+#     command = commands[1].lower()
+#     response = m[len(commands[0])+len(commands[1])+2:]
+#
+#     # https://www.codementor.io/@arpitbhayani/overload-functions-in-python-13e32ahzqt
+#     # When overloading the same name, a new function is created entirely. check id().
+#     # Python will not loose its memory address since it's being referenced elsewhere.
+#     @BOT.decorator([command])
+#     def custom_function(_):
+#         BOT.send_message(response)
+#
+#     result = save_response_file({'command': command, 'response': response})
+#     BOT.send_message(f'"{command}" {result}! \U0001F4BE')
+
+
+# @BOT.decorator(['!remove', '!erase', '!del'], access=1)
+# def command_remove_custom_responses(message: Message):
+#     commands = message.message.split()
+#     if len(commands) < 2:
+#         BOT.send_message('Syntax: !remove <!command>')
+#         return
+#     result = erase_response_from_file(commands[1])
+#
+#     for handler in BOT.handlers:
+#         if commands[1] in handler['commands']:
+#             BOT.handlers.remove(handler)
+#
+#     BOT.send_message(f'{commands[1]} {"deleted!" if result else "not found!"}')
+#
+#
+# create_responses_from_file()
diff --git a/plugins/core_gtts.py b/plugins/core_gtts.py
index 6839789..3c29fba 100644
--- a/plugins/core_gtts.py
+++ b/plugins/core_gtts.py
@@ -16,34 +16,34 @@ TEMP_DIR = os.path.join(APP_PATH, 'sounds', 'gtts')
 QUEUE = queue.Queue()
 
 
-@BOT.decorator(['!tts'])
-def command_replytts(message: Message):
-    message = '!br \U0001F1E7\U0001F1F7, !au \U0001F1E6\U0001F1FA, !s !en \U0001F1EC\U0001F1E7, ' \
-              '!us \U0001F1FA\U0001F1F8, !de \U0001F1E9\U0001F1EA, !es \U0001F1EA\U0001F1F8, ' \
-              '!it \U0001F1EE\U0001F1F9, !pl \U0001F1F5\U0001F1F1, !pt \U0001F1F5\U0001F1F9, ' \
-              '!ru \U0001F1F7\U0001F1FA, !se \U0001F1F8\U0001F1EA, !uk \U0001F1FA\U0001F1E6, ' \
-              '!cn \U0001F1E8\U0001F1F3, !ja !jp \U0001F1EF\U0001F1F5, !fr \U0001F1EB\U0001F1F7. ' \
-              'Example: !fr animé milkers Honk'
-    BOT.send_message(message)
+# @BOT.decorator(['!tts'])
+# def command_replytts(message: Message):
+#     message = '!br \U0001F1E7\U0001F1F7, !au \U0001F1E6\U0001F1FA, !s !en \U0001F1EC\U0001F1E7, ' \
+#               '!us \U0001F1FA\U0001F1F8, !de \U0001F1E9\U0001F1EA, !es \U0001F1EA\U0001F1F8, ' \
+#               '!it \U0001F1EE\U0001F1F9, !pl \U0001F1F5\U0001F1F1, !pt \U0001F1F5\U0001F1F9, ' \
+#               '!ru \U0001F1F7\U0001F1FA, !se \U0001F1F8\U0001F1EA, !uk \U0001F1FA\U0001F1E6, ' \
+#               '!cn \U0001F1E8\U0001F1F3, !ja !jp \U0001F1EF\U0001F1F5, !fr \U0001F1EB\U0001F1F7. ' \
+#               'Example: !fr animé milkers Honk'
+#     BOT.send_message(message)
 
 
-@BOT.decorator(['!br', '!au', '!s', '!en', '!de', '!es', '!ja', '!jp', '!it', '!pl', '!pt',
-                '!ru', '!se', '!uk', '!cn', '!fi', '!fr', '!us'])
-def command_gtts(message: Message):
-    size = len(message.command)
-    if not message.message[size:]:
-        return
-
-    langs = {'!br': 'pt-br', '!au': 'en-au', '!s': 'en-gb', '!en': 'en-gb', '!de': 'de',
-             '!es': 'es-es', '!ja': 'ja', '!jp': 'ja', '!it': 'it', '!pl': 'pl',
-             '!pt': 'pt-pt', '!ru': 'ru', '!se': 'sv', '!uk': 'uk', '!cn': 'zh-cn',
-             '!fi': 'fi', '!fr': 'fr', '!us': 'en-us'}
-
-    result = gtts.gTTS(
-        message.message[size:size+100],
-        lang=langs[message.command])
-
-    QUEUE.put_nowait(result)
+# @BOT.decorator(['!br', '!au', '!s', '!en', '!de', '!es', '!ja', '!jp', '!it', '!pl', '!pt',
+#                 '!ru', '!se', '!uk', '!cn', '!fi', '!fr', '!us'])
+# def command_gtts(message: Message):
+#     size = len(message.command)
+#     if not message.message[size:]:
+#         return
+#
+#     langs = {'!br': 'pt-br', '!au': 'en-au', '!s': 'en-gb', '!en': 'en-gb', '!de': 'de',
+#              '!es': 'es-es', '!ja': 'ja', '!jp': 'ja', '!it': 'it', '!pl': 'pl',
+#              '!pt': 'pt-pt', '!ru': 'ru', '!se': 'sv', '!uk': 'uk', '!cn': 'zh-cn',
+#              '!fi': 'fi', '!fr': 'fr', '!us': 'en-us'}
+#
+#     result = gtts.gTTS(
+#         message.message[size:size+100],
+#         lang=langs[message.command])
+#
+#     QUEUE.put_nowait(result)
 
 
 def gtts_daemon():
diff --git a/plugins/core_misc.py b/plugins/core_misc.py
index e43178d..907072a 100644
--- a/plugins/core_misc.py
+++ b/plugins/core_misc.py
@@ -2,14 +2,14 @@ from parky_bot.settings import BOT
 from parky_bot.models.message import Message
 
 
-@BOT.decorator(['!commands'])
-def command_replycommands(_: Message):
-    BOT.send_message('!sounds, !tts, !uptime, !pat <someone>,' +
-                     ' !remind <something>, !love <whom> <something>.')
-
-
-@BOT.decorator(['!remind'])
-def command_remind(message: Message):
-    with open('CHAT REMINDERS!.txt', 'a') as _file:
-        _file.write(f'{message.sender}: {message.message}\n')
-    BOT.send_message('I\'ll remember to check it out!')
+# @BOT.decorator(['!commands'])
+# def command_replycommands(_: Message):
+#     BOT.send_message('!sounds, !tts, !uptime, !pat <someone>,' +
+#                      ' !remind <something>, !love <whom> <something>.')
+#
+
+# @BOT.decorator(['!remind'])
+# def command_remind(message: Message):
+#     with open('CHAT REMINDERS!.txt', 'a') as _file:
+#         _file.write(f'{message.sender}: {message.message}\n')
+#     BOT.send_message('I\'ll remember to check it out!')
diff --git a/plugins/core_pat_love.py b/plugins/core_pat_love.py
index 0ce1c28..1901503 100644
--- a/plugins/core_pat_love.py
+++ b/plugins/core_pat_love.py
@@ -12,26 +12,26 @@ RESPONSES = ('{} gives {}\'s head a soft pat Daijoubu',
              '{} tries to pat {} but they move away KannaSpooks')
 
 
-@BOT.decorator(['!pat'])
-def command_pat(message: Message):
-    if not message.targets:
-        target = message.message[5:]
-        if not target:
-            return
-    else:
-        target = message.targets[0]
-    if target.lower() == BOT.irc.username.lower():
-        doggos = ('dogeWink', 'dogeKek', 'Wowee', 'WooferWhat')
-        BOT.send_message(random.choice(doggos))
-        return
-
-    BOT.send_message(random.choice(RESPONSES).format(message.sender, target))
-
-
-@BOT.decorator(['!love'])
-def command_love(message: Message):
-    if message.message:
-        target = message.message[6:]
-        if target:
-            BOT.send_message(f'There\'s {random.randrange(0, 100)}% of love between ' +
-                             f'{message.sender} and {target} <3')
+# @BOT.decorator(['!pat'])
+# def command_pat(message: Message):
+#     if not message.targets:
+#         target = message.message[5:]
+#         if not target:
+#             return
+#     else:
+#         target = message.targets[0]
+#     if target.lower() == BOT.irc.username.lower():
+#         doggos = ('dogeWink', 'dogeKek', 'Wowee', 'WooferWhat')
+#         BOT.send_message(random.choice(doggos))
+#         return
+#
+#     BOT.send_message(random.choice(RESPONSES).format(message.sender, target))
+#
+#
+# @BOT.decorator(['!love'])
+# def command_love(message: Message):
+#     if message.message:
+#         target = message.message[6:]
+#         if target:
+#             BOT.send_message(f'There\'s {random.randrange(0, 100)}% of love between ' +
+#                              f'{message.sender} and {target} <3')
diff --git a/plugins/core_plugin_management.py b/plugins/core_plugin_management.py
index fd97793..b5a01dd 100644
--- a/plugins/core_plugin_management.py
+++ b/plugins/core_plugin_management.py
@@ -2,26 +2,26 @@ from parky_bot.settings import BOT
 from parky_bot.models.message import Message
 
 
-@BOT.decorator(['!plugin'], access=3)
-def command_toggle_plugin(message: Message):
-    command = message.message.split()
-    found = False
-
-    if len(command) < 3:
-        BOT.send_message('Syntax: !plugin <disable/enable> <!command>')
-        return
-
-    for decorator in BOT.handlers:
-        # Finding out the responsible function
-        # NOTE: Functions with a list of commands will be disabled altogether!
-        if command[2] in decorator['commands']:
-            found = True
-            if command[1] == 'disable':
-                decorator['active'] = False
-                BOT.send_message(f'Command "{command[2]}" disabled!')
-            elif command[1] == 'enable':
-                decorator['active'] = True
-                BOT.send_message(f'Command "{command[2]}" enabled!')
-    if not found:
-        BOT.send_message(
-            f'Command {command[2]} not found. Did you forget a "!"?')
+# @BOT.decorator(['!plugin'], access=3)
+# def command_toggle_plugin(message: Message):
+#     command = message.message.split()
+#     found = False
+#
+#     if len(command) < 3:
+#         BOT.send_message('Syntax: !plugin <disable/enable> <!command>')
+#         return
+#
+#     for decorator in BOT.handlers:
+#         # Finding out the responsible function
+#         # NOTE: Functions with a list of commands will be disabled altogether!
+#         if command[2] in decorator['commands']:
+#             found = True
+#             if command[1] == 'disable':
+#                 decorator['active'] = False
+#                 BOT.send_message(f'Command "{command[2]}" disabled!')
+#             elif command[1] == 'enable':
+#                 decorator['active'] = True
+#                 BOT.send_message(f'Command "{command[2]}" enabled!')
+#     if not found:
+#         BOT.send_message(
+#             f'Command {command[2]} not found. Did you forget a "!"?')
diff --git a/plugins/core_sounds.py b/plugins/core_sounds.py
index 9781bda..7bc736a 100644
--- a/plugins/core_sounds.py
+++ b/plugins/core_sounds.py
@@ -31,14 +31,14 @@ def create_sounds(sounds: list):
         LOGGER.debug('Sound %s created.', sound)
 
 
-@BOT.decorator(['!sounds'])
-def command_replysounds(message: Message):
-    message = ''
-
-    for sound in sorted(SOUNDS):
-        message += f'!{sound[:-4].lower()}, '
-    message = message[:-2] + ' KappaKappa'
-    BOT.send_message(message)
+# @BOT.decorator(['!sounds'])
+# def command_replysounds(message: Message):
+#     message = ''
+#
+#     for sound in sorted(SOUNDS):
+#         message += f'!{sound[:-4].lower()}, '
+#     message = message[:-2] + ' KappaKappa'
+#     BOT.send_message(message)
 
 
 def play_sound(sound: AudioPlayer) -> None:
diff --git a/plugins/core_twitch.py b/plugins/core_twitch.py
index d3efa10..5ffea41 100644
--- a/plugins/core_twitch.py
+++ b/plugins/core_twitch.py
@@ -1,46 +1,38 @@
 from parky_bot.settings import BOT
 from parky_bot.models.message import Message
-
-
-@BOT.decorator(['!game'])
-def command_updategame(message: Message):
-    prefix = len(message.command) + 1
-    if not message.message[prefix:]:
-        return BOT.send_message(f'Currently playing: "{BOT.twitch.game}"')
-
-    if 'broadcaster' in message.badges:
-        result = BOT.twitch.update_stream(game_title=message.message[prefix:])
-        if result:
-            BOT.send_message(f'Game set to: "{BOT.twitch.game}"')
-        else:
-            BOT.send_message(f'Twitch API failed to update game!')
-
-
-@BOT.decorator(['!status', '!title'])
-def command_updatestatus(message: Message):
-    prefix = len(message.command) + 1
-    if not message.message[prefix:]:
-        return BOT.send_message(f'Status: "{BOT.twitch.status}"')
-
-    if 'broadcaster' in message.badges:
-        result = BOT.twitch.update_stream(
-            stream_title=message.message[prefix:])
-        if result:
-            BOT.send_message(f'Title set to: "{BOT.twitch.status}"')
-        else:
-            BOT.send_message(f'Twitch API failed to update status!')
-
-
-@BOT.decorator(['!uptime'])
+from time import sleep
+
+
+# @BOT.decorator(['!game'])
+# def command_updategame(message: Message):
+#     prefix = len(message.command) + 1
+#     if not message.message[prefix:]:
+#         return BOT.send_message(f'Currently playing: "{BOT.twitch.game}"')
+#
+#     if 'broadcaster' in message.badges:
+#         result = BOT.twitch.update_stream(game_title=message.message[prefix:])
+#         if result:
+#             BOT.send_message(f'Game set to: "{BOT.twitch.game}"')
+#         else:
+#             BOT.send_message(f'Twitch API failed to update game!')
+#
+#
+# @BOT.decorator(['!status', '!title'])
+# def command_updatestatus(message: Message):
+#     prefix = len(message.command) + 1
+#     if not message.message[prefix:]:
+#         return BOT.send_message(f'Status: "{BOT.twitch.status}"')
+#
+#     if 'broadcaster' in message.badges:
+#         result = BOT.twitch.update_stream(
+#             stream_title=message.message[prefix:])
+#         if result:
+#             BOT.send_message(f'Title set to: "{BOT.twitch.status}"')
+#         else:
+#             BOT.send_message(f'Twitch API failed to update status!')
+#
+#
+@BOT.decorator(['!raffle', '!raffle :whites69Awk:', '!sraffle'])
 def command_uptime(message: Message):
-    time = BOT.twitch.get_uptime()
-    if not time:
-        return BOT.send_message(f'{BOT.twitch.channel} is offline.')
-
-    time = str(time).split('.')[0]
-    time = time.replace(':', ' hour(s), ', 1)
-    time = time.replace(':', ' minutes, ')
-    time += ' seconds.'
-    time = time.replace('0 hour(s), ', '')  # Removing this case.
-
-    BOT.send_message(f'{BOT.twitch.channel} has been live for {time}')
+    sleep(5)
+    BOT.send_message(f'!join')
